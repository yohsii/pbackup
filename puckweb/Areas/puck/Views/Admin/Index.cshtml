@inject puck.core.Abstract.I_Puck_Repository repo;
@model List<puck.core.Models.Admin.PuckUserViewModel>
@{
    Layout = null;    
}
<div class="user_list">
<p>
    <button class="create btn btn-link"><i class="fas fa-plus-circle"></i>&nbsp;new user</button>
</p>
<table>
    <tr>
        <th>
            Username
        </th>
        <th>
            Email
        </th>
        <th width="180">
            Roles
        </th>
        <th>
            Language
        </th>
        <th>
            Start Path
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.User.UserName)
        </td>
        
        <td>
            @Html.DisplayFor(modelItem => item.User.Email)
        </td>
        <td>
            @string.Join(", ",item.Roles.Select(x=>x.Substring(1)))
        </td>
        <td>@Html.DisplayFor(modelItem=>item.UserVariant)</td>
        <td>
            @if (item.StartNodes != null && item.StartNodes.Count > 0) {
                var ids = item.StartNodes.Select(x=>x.Id).ToArray();
                var groupedStartNodes = repo.GetPuckRevision().Where(x => ids.Contains(x.Id) && x.Current).ToList().GroupBy(x=>x.Id);
                foreach(var grouping in groupedStartNodes) { 
                    @grouping.First().Path <br/>
                }
            }            
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { }, new {@class="edit",data_username=item.User.UserName}) <br />
            @Html.ActionLink("Delete", "Delete", new { },new {@class="delete",data_username=item.User.UserName})
        </td>
    </tr>
}

</table>
</div>