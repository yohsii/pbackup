
@model Dictionary<string,string>
<div class="redirects">
    <ul>
        <li>
            <label>From <i title="Choose Page" class="choose-page fas fa-pencil-alt"></i></label>
            <input class="from" />
        </li>
        <li>
            <label>To <i title="Choose Page" class="choose-page fas fa-pencil-alt to"></i></label>
            <input class="to" />
        </li>
        <li>
            <label>Type</label>
            <select class="redirect_type">
                @*<option value="@puck.core.Constants.DBNames.Redirect301">Permanent</option>
                <option value="@puck.core.Constants.DBNames.Redirect302">Temporary</option>*@
                <option value="301">Permanent</option>
                <option value="302">Temporary</option>
            </select>
        </li>
        <li>
            <button class="btn btn-light">add</button>
        </li>
    </ul>
    <div class="nodisplay entry"><span class="info"></span>&nbsp;<span class="delete"><i class="fas fa-minus-circle"></i></span><span class="edit"><i class="fas fa-pencil-alt"></i></span></div>
    <div class="display clearboth">
        @foreach(var r in Model.ToList()){
            var rtype = r.Key.StartsWith(puck.core.Constants.DBNames.Redirect301) ? puck.core.Constants.DBNames.Redirect301 : puck.core.Constants.DBNames.Redirect302;
            <div data-rtype="@rtype" data-from="@r.Key.Substring(rtype.Length)" data-to="@r.Value" class="entry">@r.Key.Substring(rtype.Length) - @r.Value - @rtype.Substring(8,3)&nbsp;<span><i class="fas fa-minus-circle"></i></span></div>
        }        
    </div>
    <div class="tree_container">
        <ul class="content nomenu redirect">
            <li class="node" data-children_path="/"></li>
        </ul>  
    </div>    
</div>
<script>
    onAfterDom(function () {
        var redirectsContainer = $(".redirects");
        var from = redirectsContainer.find("input.from");
        var to = redirectsContainer.find("input.to");
        var rtype_sel = redirectsContainer.find("select.redirect_type");
        var display = redirectsContainer.find(".display");
        //ini
        display.find(".entry").each(function (i) {
            var el = $(this);
            el.find("i").click(function () {
                el.remove();
                setValue();
            });
        });
        redirectsContainer.find("ul.content .node").attr("data-children_path",startPath);
        redirectsContainer.find("label i").click(function () {
            var to = $(this).hasClass("to");
            var target = $(this).parent().siblings("input");
            var markup = redirectsContainer.find(".tree_container").clone();
            var el = markup.find(".node:first");
            overlay(markup,undefined,undefined,undefined,to?"Redirect To":"Redirect From");
            getDrawContent(startId, el);
            markup.on("click", ".node span", function (e) {
                var node = $(this).parents(".node:first");
                var path = node.attr("data-path");
                if (to) {
                    path = path.slice(1);
                    if (path.indexOf("/") > -1)
                        path = path.substring(path.indexOf("/"));
                    else
                        path = "/";
                }
                target.val(path);
                overlayClose();
            });
        });        

        var getPropNameKey = function (i) {
            return "@ViewData.ModelMetadata.PropertyName" + "[" + i + "].Key";
        }
        var getPropNameValue = function (i) {
            return "@ViewData.ModelMetadata.PropertyName" + "[" + i + "].Value";
        }
        var setValue = function () {
            redirectsContainer.find("input:hidden").remove();
            display.find(".entry").each(function (i) {
                var key = $(this).attr('data-from');
                var value = $(this).attr('data-to');
                var rtype = $(this).attr("data-rtype");
                redirectsContainer.append(
                        "<input type='hidden' name='" + getPropNameKey(i) + "' value='" +rtype+ key + "'/>"
                        + "<input type='hidden' name='" + getPropNameValue(i) + "' value='" + value + "'/>"
                    );
            });
            if (redirectsContainer.find("input:hidden").length == 0) {
                redirectsContainer.append(
                        "<input type='hidden' name='" + getPropNameKey(0) + "' value=''/>"
                        + "<input type='hidden' name='" + getPropNameValue(0) + "' value=''/>"
                    );
            }
        }
        var handleEdit = function (entry) {
            from.val(entry.attr("data-from"));
            to.val(entry.attr("data-to"));
            rtype_sel.val(entry.attr("data-rtype"));
            cright.parents(".scrollContainer").get(0).scroll(0, 0);
        }
        var handleDelete = function (entry) {
            deleteRedirect(entry.attr("data-from"), function (res1) {
                if (res1.success)
                    entry.remove();
                else {
                    msg(false, res1.message);
                }
            });
        }
        showLoader(cright);
        getRedirects(function (res) {
            for (var i = res.redirects.length - 1; i > -1 ; i--) {
                var redirect = res.redirects[i];
                var entry = redirectsContainer.find(".entry.nodisplay").clone();
                entry.removeClass("nodisplay");
                entry.attr("data-from", redirect.From).attr("data-to", redirect.To).attr("data-rtype", redirect.Type);
                (function (entry) {
                    entry.find("span.edit").click(function () {
                        handleEdit(entry);
                    });
                })(entry);
                (function (entry) {
                    entry.find("span.delete").click(function () {
                        handleDelete(entry);
                    });
                })(entry);
                entry.find("span.info").append(redirect.From + " - " + redirect.To + " - " + redirect.Type);
                display.append(entry);
            }
            hideLoader();
        });
        redirectsContainer.find("button").click(function (e) {
            e.preventDefault();
            if (!from.val().isEmpty() && !to.val().isEmpty() && redirectsContainer.find(".display div[data-from='" + (from.val() || "").toLowerCase() + "']").length > 0) {
                if (!confirm("a redirect for this url already exists, do you want to overwrite it?"))
                    return;
            } else if (from.val().isEmpty() || to.val().isEmpty())
                return;
            var entry = redirectsContainer.find(".display div[data-from='" + (from.val() || "").toLowerCase() + "']");
            if (entry.length == 0)
                entry = redirectsContainer.find(".entry.nodisplay").clone();
            entry.removeClass("nodisplay");
            entry.attr("data-from", (from.val() || "").toLowerCase()).attr("data-to", (to.val() || "").toLowerCase()).attr("data-rtype", rtype_sel.val());
            addRedirect(from.val().toLowerCase(), to.val().toLowerCase(), rtype_sel.val(), function (res) {
                if (res.success) {
                    entry.find("span.edit").click(function () {
                        handleEdit(entry);
                    });
                    entry.find("span.delete").click(function () {
                        handleDelete(entry);
                    });
                    entry.find("span.info").html(from.val() + " - " + to.val() + " - " + rtype_sel.val()/*.substr(8, 3)*/);
                    display.prepend(entry);
                } else {
                    msg(false,res.message);
                }
            });
            //setValue();
            
        });
    });
    
</script>