@model puck.core.Models.PuckImage
@using puck.core.Models.EditorSettings
@{
    var settings = this.PuckEditorSettings<CropsEditorSettings>(inherit:false,modelTypeOverride:typeof(puck.core.Base.BaseModel))
        ?? new CropsEditorSettings()
        {
            Crops=new List<puck.core.Models.CropInfo>()
        };
    var guid = Guid.NewGuid();
}
    <div data-guid="@guid.ToString()" class="puckImage puckimage_@ViewData.ModelMetadata.PropertyName puckimage_@ViewData.TemplateInfo.HtmlFieldPrefix.Replace("[","_").Replace("]","_").Replace(".","_")">
        <div style="display:none;" class="propName" data-propName="@ViewData.TemplateInfo.HtmlFieldPrefix"></div>
        <ul class="nav nav-tabs" role="tablist" id="myTab">
            <li class="nav-item active"><a class="nav-link active" role="tab" @*data-toggle="tab"*@ href="#">Image info</a></li>
            <li class="nav-item"><a @*data-toggle="tab"*@ class="nav-link" href="#">Crops</a></li>
        </ul>

        <div class="tab-content">
            <div class="tab-pane active" role="tabpanel" id="_puckImage_info_tab_@ViewData.ModelMetadata.PropertyName">
                <div class="noedit settings_display_image">
                    @if (!string.IsNullOrEmpty(Model?.Path))
                    {
                        <img alt="image" src="@Model.Path" width="100" />
                        <a href="@Model.Path" target="_blank" style="display:block;">
                            @{
                                var value = Model.Path.TrimEnd('/');
                            }
                            @if (value.IndexOf("/") > -1)
                            {
                                @value.Substring(Model.Path.LastIndexOf("/") + 1)
                            }
                            else
                            {
                                @value
                            }
                        </a>
                    }
                </div>
                @Html.HiddenFor(x=>x.Path, new { id = "" })
                <div class="editor-label" style="">
                    @Html.LabelFor(x => x.Description)
                    @Html.ValidationMessageFor(x => x.Description)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(x => x.Description)
                </div>
                @if (!string.IsNullOrEmpty(Model?.Extension))
                {
                    <div class="field">
                        <span>Extension:</span>@Html.EditorFor(x => x.Extension)
                    </div>
                }
                @if (!string.IsNullOrEmpty(Model?.Width?.ToString()))
                {
                    <div class="field">
                        <span>Width:</span>@Html.EditorFor(x => x.Width)
                    </div>
                }
                @if (!string.IsNullOrEmpty(Model?.Height?.ToString()))
                {
                    <div class="field">
                        <span>Height:</span>@Html.EditorFor(x => x.Height)
                    </div>
                }
                @if (!string.IsNullOrEmpty(Model?.Size?.ToString()))
                {
                    <div class="field">
                        <span>Size:</span>@Html.EditorFor(x => x.Size)
                    </div>
                }
                <br />
                @Html.EditorFor(x => x.File)
                <div class="d-none">@Html.EditorFor(x=>x.CropUrls)</div>
            </div>
            <div class="tab-pane " role="tabpanel" id="_puckImage_crops_tab_@ViewData.ModelMetadata.PropertyName">
                <div class="cropSizes">
                    @foreach (var c in settings.Crops ?? new List<puck.core.Models.CropInfo>())
                    {
                        <div class="cropSize" data-alias="@c.Alias" data-width="@c.Width" data-height="@c.Height">
                            <div>
                                <span>@c.Alias</span>
                                <br />
                                <span>@c.Width<text>x</text>@c.Height</span>
                            </div>
                        </div>
                    }
                </div>
                <div class="zoom-container p-2">
                    <div class="minus">
                        <i class="fas fa-search-minus" />
                    </div>
                    <span data-zoom="1" class="zoom-amount">1</span>
                    <div class="plus">
                        <i class="fas fa-search-plus" />
                    </div>
                </div>
                <div class=""></div>
                <div class="message">
                    @if (settings.Crops == null || settings.Crops.Count == 0)
                    {
                        <div>Look like you haven't set up any crops. Click <a class="addCropSizesLink" href="#settings?path=/puck/settings/editorparameters&stype=@(typeof(CropsEditorSettings).FullName)&mtype=BaseModel">here</a> to add some crop sizes.</div>
                    }
                </div>
                <div class="viewport" style="height:auto;max-height:600px;width:500px;">

                </div>
            </div>            
        </div>

        <div class="selected_content">
            <div style="display:none;">
                @Html.EditorFor(x => x.Crops)
            </div>

            @foreach (var Crops in Model?.Crops ?? new List<puck.core.Models.CropModel> { })
            {
                <div style="display:none;" class="cropInfo" data-alias="@Crops.Alias" data-width="@Crops.Width" data-height="@Crops.Height"
                    data-left="@Crops.Left" data-top="@Crops.Top" data-right="@Crops.Right" data-bottom="@Crops.Bottom" data-zoom="@(Crops.Zoom??1)" data-zoom-left="@Crops.ZoomLeft" data-zoom-top="@Crops.ZoomTop" 
                     data-crop-left="@Crops.CropLeft" data-crop-top="@Crops.CropTop">
                </div>
            }
        </div>
        
    </div>
<script type="text/javascript">
    onAfterDom(function () {
        var guid = "@guid.ToString()";
        var modelType = "@Html.Raw(ViewBag.Level0Type.Name)";
        var propname = "@Html.Raw(ViewData.TemplateInfo.HtmlFieldPrefix)";
        var isPrePopulated = '@ViewBag.IsPrePopulated' == 'True';

        var escapePropname = function (str) {
            return str.replace(/\[/g, "_").replace(/\]/g, "_").replace(/\./g, "_");
        }
        var container = $("[data-guid='" + guid + "']");

        var selected_container = container.find(".selected_content:first");
        var getPropName = function () {
            return container.find("div:hidden.propName:first").attr("data-propName");
        }
        //container.parents(".editor-field:first").css({ clear: "both" });
        container.find(".addCropSizesLink").click(function (e) {
            if (!canChangeMainContent()) {
                e.preventDefault();
            }
        });
        var setValue = function () {
            selected_container.find("input:hidden").remove();
            container.find(".cropSizes:first .cropSize").each(function (i) {
                var el = $(this);
                selected_container.append(
                    "<input type='hidden' name='" + getPropName() + ".Crops[" + i + "].Alias' value='" + el.attr("data-alias") + "'/>"
                    + "<input type='hidden' name='" + getPropName() + ".Crops[" + i + "].Width' value='" + el.attr("data-width") + "'/>"
                    + "<input type='hidden' name='" + getPropName() + ".Crops[" + i + "].Height' value='" + el.attr("data-height") + "'/>"
                    + (el.attr("data-left") == undefined ? "" :
                        "<input type='hidden' name='" + getPropName() + ".Crops[" + i + "].Left' value='" + el.attr("data-left") + "'/>")
                    + (el.attr("data-top") == undefined ? "" :
                        "<input type='hidden' name='" + getPropName() + ".Crops[" + i + "].Top' value='" + el.attr("data-top") + "'/>")
                    + (el.attr("data-right") == undefined ? "" :
                        "<input type='hidden' name='" + getPropName() + ".Crops[" + i + "].Right' value='" + el.attr("data-right") + "'/>")
                    + (el.attr("data-bottom") == undefined ? "" :
                        "<input type='hidden' name='" + getPropName() + ".Crops[" + i + "].Bottom' value='" + el.attr("data-bottom") + "'/>")
                    + (el.attr("data-zoom") == undefined ? "" :
                        "<input type='hidden' name='" + getPropName() + ".Crops[" + i + "].Zoom' value='" + el.attr("data-zoom") + "'/>")
                    + (el.attr("data-zoom-left") == undefined ? "" :
                        "<input type='hidden' name='" + getPropName() + ".Crops[" + i + "].ZoomLeft' value='" + el.attr("data-zoom-left") + "'/>")
                    + (el.attr("data-zoom-top") == undefined ? "" :
                        "<input type='hidden' name='" + getPropName() + ".Crops[" + i + "].ZoomTop' value='" + el.attr("data-zoom-top") + "'/>")
                    + (el.attr("data-zoom-top") == undefined ? "" :
                        "<input type='hidden' name='" + getPropName() + ".Crops[" + i + "].CropLeft' value='" + el.attr("data-crop-left") + "'/>")
                    + (el.attr("data-zoom-top") == undefined ? "" :
                        "<input type='hidden' name='" + getPropName() + ".Crops[" + i + "].CropTop' value='" + el.attr("data-crop-top") + "'/>")
                );
            });

        }
        var zoomAmountContainer = container.find(".zoom-amount");
        
        var viewportWidth = 500;
        if ($(window).width() < viewportWidth)
            viewportWidth = $(window).width() - 30;
        var originalWidth = @(Model?.Width??0);
        var originalHeight = @(Model?.Height??0);
        var imageUrl = '@(Model?.Path??"")';
        var viewport = container.find(".viewport");
        var selected_container = container.find(".selected_content");
        var message_container = container.find(".message");
        var setupDrag = function (viewport,img,zoom) {
            
        }
        var setupImage = function (cropAlias, cropWidth, cropHeight, leftFrac, topFrac, rightFrac, bottomFrac, zoom,zoomLeft,zoomTop) {
            //viewport.find("img").remove();
            zoom = zoom || 1;
            zoomAmountContainer.attr("data-zoom", zoom).html(zoom);
            var img = $("<img/>").attr({ src: imageUrl });
            if (viewport.find("img").length > 0)
                viewport.find("img").remove();
            if (viewport.find("img").length == 0) {
                viewport.append(img).css({ overflow: "hidden" });
            }
            else
            img = viewport.find("img");
            
            var doSetup = function () {
                
                if (zoom > 1) {
                    img.css({ cursor: "move" });
                } else {
                    img.css({ cursor: "default" });
                }
                viewport.css({ width: viewportWidth }).find(".cropper").remove();
                var imgWidth;
                var originalImgWidth;
                var cropperWidth;
                var cropperHeight;
                var aRatio = originalWidth / originalHeight;
                var resize = false;
                message_container.html("");
                if (cropWidth > originalWidth || cropHeight > originalHeight) {
                    imgWidth = cropWidth > viewportWidth ? viewportWidth : cropWidth;
                    resize = true;
                    if (!(originalWidth == 0 && originalHeight == 0))
                        message_container.html("image is smaller than target crop size, the image will be resized to fit.");
                } else {
                    imgWidth = originalWidth > viewportWidth ? viewportWidth : originalWidth;
                    originalImgWidth = imgWidth;
                    imgWidth *= zoom;
                    //dragContainer.css({ width: imgWidth + "px" });
                    if (zoom > 1) {
                        viewport.css({ height: 600 + "px" });
                    }
                }
                var cropARatio = cropWidth / cropHeight;
                var imgHeight = imgWidth / aRatio;
                widthRatio = originalWidth / originalImgWidth;
                cropperWidth = cropWidth / widthRatio;
                cropperHeight = cropperWidth / cropARatio;

                img.css({ width: imgWidth + "px", height: imgHeight + "px" });
                if (imgWidth < viewportWidth)
                    viewport.css({ width: imgWidth });
                viewport.css({ height: imgHeight });
                //setupDrag(viewport, img, zoom);

                if (!resize) {
                    var cropper = $("<div/>").attr({ class: "cropper" }).css({ width: cropperWidth, height: cropperHeight, zIndex: 2 });
                    var left = 0;
                    var top = 0;
                    if (leftFrac != undefined && leftFrac != "" && topFrac != undefined && topFrac != "") {
                        left = (imgWidth * leftFrac) + Math.abs(zoomLeft);
                        top = (imgHeight * topFrac) + Math.abs(zoomTop);
                        //debugger;
                    } else {
                        left = (imgWidth - cropperWidth) / 2;
                        top = (imgHeight - cropperHeight) / 2;
                    }

                    if (img.hasClass("ui-draggable") && img.data("uiDraggable")) {
                        try {
                            img.draggable("destroy");
                        } catch (error) {
                            console.error(error);
                        }
                        img.data("uiDraggable", "");
                    }
                    if (zoom > 1) {
                        //debugger;
                        img.css({ position: "absolute", left: zoomLeft + "px", top: zoomTop + "px" });

                        img.draggable({
                            drag: function (e, ui) {
                                if (ui.position.left > 0) {
                                    ui.position.left = 0;
                                }
                                if (ui.position.top > 0) {
                                    ui.position.top = 0;
                                }
                                //console.log("l", ui.position.left, "p", (imgWidth - viewport.width()));
                                //console.log("t", ui.position.top, "p", (imgHeight - viewport.height()));
                                var l = ui.position.left + imgWidth + viewport.width();
                                if (ui.position.left + imgWidth < viewport.width()) {
                                    //debugger;
                                    ui.position.left = viewport.width() - imgWidth;
                                }
                                var t = ui.position.top + viewport.height();
                                if (ui.position.top < (viewport.height() - imgHeight)) {
                                    ui.position.top = viewport.height() - imgHeight;
                                }

                                //console.log("drag", e, ui);
                                //console.log("vp ol", viewport.offset().left);
                                //console.log("vp ot", viewport.offset().top);
                            }
                        });
                    }
                    //debugger;
                    if (left + cropperWidth > viewport.width()) {
                        offsetLeft = (left + cropperWidth) - viewport.width();
                        img.css({ left: img.position().left - offsetLeft });
                        left -= offsetLeft;
                    }
                    if (top + cropperHeight > viewport.height()) {
                        offsetTop = (top + cropperHeight) - viewport.height();
                        img.css({ top: img.position().top - offsetTop });
                        top -= offsetTop;
                    }

                    cropper.css({ left: left + "px", top: top + "px" }).draggable({
                        containment: 'parent'
                        , stop: function (event, ui) {
                            setPositions(cropAlias, ui.position.left, ui.position.top, imgWidth, imgHeight, cropperWidth, cropperHeight, zoom, img.position().left, img.position().top);
                            setValue();
                        }
                    });
                    viewport.append(cropper);
                    //debugger;
                    setPositions(cropAlias, left, top, imgWidth, imgHeight, cropperWidth, cropperHeight, zoom, img.position().left, img.position().top);
                    setValue();
                }
            }
            img.load(function () {
                doSetup();
                
                var callSetup = function () {
                    setTimeout(function () {
                        if (img.is(":visible"))
                            doSetup();
                        else
                            callSetup();
                    }, 500);
                }
                callSetup();
            });
        }
        container.find(".minus").click(function () {
            if (zoomAmountContainer.attr("data-zoom") == "1") return;
            zoomAmountContainer.attr("data-zoom", zoomAmountContainer.attr("data-zoom") - 0.5).html(zoomAmountContainer.attr("data-zoom"));
            var cropSize = container.find(".cropSize.active");
            cropSize.attr("data-zoom", zoomAmountContainer.attr("data-zoom"));
            //viewport.find("img").css({left:1,top:1});
            initCropSize(cropSize);
            setTimeout(function () {
                viewport.find("img").get(0).style.left = "1px";
                viewport.find("img").get(0).style.top = "1px";
            },1000);
        });
        container.find(".plus").click(function () {
            zoomAmountContainer.attr("data-zoom", zoomAmountContainer.attr("data-zoom") - 0 + 0.5).html(zoomAmountContainer.attr("data-zoom"));
            var cropSize = container.find(".cropSize.active");
            cropSize.attr("data-zoom",zoomAmountContainer.attr("data-zoom"));
            viewport.find("img").css({left:1,top:1});
            initCropSize(cropSize);
        });
        var setPositions = function (cropAlias,posLeft,posTop,imgWidth,imgHeight,cropperWidth,cropperHeight,zoom,zoomLeft,zoomTop) {
            var leftF = (zoomLeft + posLeft) / imgWidth;
            var cropLeft = (Math.abs(zoomLeft) + posLeft) / imgWidth;
            var topF = (zoomTop + posTop) / imgHeight;
            var cropTop = (Math.abs(zoomTop) + posTop) / imgHeight;
            var rightF = (imgWidth - (Math.abs(zoomLeft) + posLeft + cropperWidth)) / imgWidth;
            var bottomF = (imgHeight - (Math.abs(zoomTop) + posTop + cropperHeight)) / imgHeight;
            var cropSize = container.find(".cropSizes:first .cropSize[data-alias='" + cropAlias + "']");
            if (cropSize.length == 0) return;
            cropSize.attr("data-left", leftF);
            cropSize.attr("data-top", topF);
            cropSize.attr("data-right", rightF);
            cropSize.attr("data-bottom", bottomF);
            cropSize.attr("data-zoom", zoom);
            cropSize.attr("data-zoom-left", zoomLeft);
            cropSize.attr("data-zoom-top", zoomTop);
            cropSize.attr("data-crop-left", cropLeft);
            cropSize.attr("data-crop-top", cropTop);
            //console.log(leftF, topF, rightF, bottomF);
        }
        var initCropSize = function (el) {
            container.find(".cropSize").removeClass("active");
            el.addClass("active");
            var alias = el.attr("data-alias");
            var width = el.attr("data-width");
            var height = el.attr("data-height");
            var left = el.attr("data-left");
            var top = el.attr("data-top");
            var right = el.attr("data-right");
            var bottom = el.attr("data-bottom");
            var zoom = el.attr("data-zoom");
            var zoomLeft = el.attr("data-zoom-left");
            var zoomTop = el.attr("data-zoom-top");
            setupImage(alias, width, height, left, top, right, bottom,zoom,zoomLeft,zoomTop);
        }
        container.find(".cropSizes:first .cropSize").click(function () {
            var el = $(this);
            var zoomAmount = el.attr("data-zoom");
            container.find(".zoom-amount").html(zoomAmount).attr("zoom-amount",zoomAmount);
            initCropSize(el);
        });

        var load = function () {
            container.find(".selected_content:first .cropInfo").each(function () {
                var el = $(this);
                var alias = el.attr("data-alias");
                var width = el.attr("data-width");
                var height = el.attr("data-height");
                var left = el.attr("data-left");
                var top = el.attr("data-top");
                var right = el.attr("data-right");
                var bottom = el.attr("data-bottom");
                var zoom = el.attr("data-zoom");
                var zoomLeft = el.attr("data-zoom-left");
                var zoomTop = el.attr("data-zoom-top");
                var cropLeft = el.attr("data-crop-left");
                var cropTop = el.attr("data-crop-top");
                var elCropSize = container.find(".cropSizes:first .cropSize[data-alias='" + alias + "']");
                if (elCropSize.length == 0) return;
                var cropSizeWidth = elCropSize.attr("data-width");
                var cropSizeHeight = elCropSize.attr("data-height");
                if (width != cropSizeWidth || height != cropSizeHeight) return;
                elCropSize.attr("data-left", left);
                elCropSize.attr("data-top", top);
                elCropSize.attr("data-right", right);
                elCropSize.attr("data-bottom", bottom);
                elCropSize.attr("data-zoom", zoom);
                elCropSize.attr("data-zoom-left", zoomLeft);
                elCropSize.attr("data-zoom-top", zoomTop);
                elCropSize.attr("data-crop-left", cropLeft);
                elCropSize.attr("data-crop-top",cropTop);
            });
            //debugger;
            container.find(".cropSizes:first .cropSize").each(function () {
                var el = $(this);
                initCropSize(el);
            });
            var zoomAmount = container.find(".cropSizes.active").attr("data-zoom");
            container.find(".zoom-amount").html(zoomAmount).attr("zoom-amount",zoomAmount);
        }
        load();
        container.find(".cropSize:first").click();
        setValue();
        
    });    
</script>
<style>
    .zoom-container .plus{
        display:inline-block;
    }
    .zoom-container .plus i,.zoom-container .minus i{
        padding:5px;
        cursor:pointer;
    }
    .zoom-container .minus{
        display:inline-block;
    }
    .zoom-container .plus,.zoom-container .minus{
        font-size:14px;
    }
    .zoom-container .zoom-amount {
        background:#ddd;
        padding:5px;
        color:#fff;
        font-weight:bold;
    }
    .puckImage .field div{
        display:inline;
    }
    .puckImage .cropSize {
        border:1px solid #dddddd;
        margin:0px;
        padding:0px;
        display:inline-block;
        cursor:pointer;
    }
    .puckImage .cropSize.active {
        background:#eeeeee/*00ff7f*/;
    }
    .puckImage .cropSize > div {
        padding:8px;
    }
    .puckImage .cropper {
        border:1px solid #dddddd;
        background-color:rgba(255, 216, 0,0.5);
        position:absolute!important;
        top:0px;
        left:0px;
    }
    .puckImage .viewport {
        position:relative;
    }
</style>